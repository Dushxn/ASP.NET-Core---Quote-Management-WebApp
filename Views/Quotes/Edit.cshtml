@model QuotesWebApp.Models.Quotes

@{
    ViewData["Title"] = "Edit Quote";
}

<div class="container mt-5">
    <div class="page-header fade-in">
        <h1 class="page-title">
            <i class="fas fa-edit"></i>
            Edit Quote
        </h1>
        <p class="page-subtitle">Update and refine your inspiring quote</p>
    </div>

    <div class="row">
        <div class="col-lg-8" style="margin: 0 auto;">
            <div class="card fade-in">
                <div class="card-body">
                    <form asp-action="Edit">
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
                        <input type="hidden" asp-for="Id" />

                        <div class="mb-3">
                            <label asp-for="Quote" class="form-label">
                                <i class="fas fa-quote-right"></i>
                                Quote Text
                            </label>
                            <textarea asp-for="Quote" class="form-control" rows="4"
                                      placeholder="Enter the inspiring quote here..." required></textarea>
                            <span asp-validation-for="Quote" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Auther" class="form-label">
                                <i class="fas fa-user"></i>
                                Author
                            </label>
                            <input asp-for="Auther" class="form-control"
                                   placeholder="Who said this quote?" required />
                            <span asp-validation-for="Auther" class="text-danger"></span>
                        </div>

                        <div class="mb-4">
                            <label asp-for="description" class="form-label">
                                <i class="fas fa-align-left"></i>
                                Description (Optional)
                            </label>
                            <textarea asp-for="description" class="form-control" rows="3"
                                      placeholder="Add context or explain why this quote is meaningful..."></textarea>
                            <span asp-validation-for="description" class="text-danger"></span>
                        </div>

                        <div class="d-flex justify-content-between">
                            <a asp-action="Index" class="btn btn-outline-secondary">
                                <i class="fas fa-arrow-left"></i>
                                Back to Collection
                            </a>
                            <div class="action-buttons">
                                <a asp-action="Details" asp-route-id="@Model.Id" class="btn btn-outline-primary">
                                    <i class="fas fa-eye"></i>
                                    View Details
                                </a>
                                <button type="submit" class="btn btn-warning">
                                    <i class="fas fa-save"></i>
                                    Save Changes
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h5 class="mb-3">
                    <i class="fas fa-history me-2 text-info"></i>
                    Current Quote Preview
                </h5>
                <div class="quote-card">
                    <div class="quote-text" id="quote-preview">
                        @Model.Quote
                    </div>
                    <div class="quote-author" id="author-preview">
                        - @Model.Auther
                    </div>
                    @if (!string.IsNullOrEmpty(Model.description))
                    {
                        <div class="quote-description" id="description-preview">
                            @Model.description
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('form');
            const inputs = form.querySelectorAll('input, textarea');

            // Real-time preview updates
            const quoteInput = document.querySelector('#Quote');
            const authorInput = document.querySelector('#Auther');
            const descriptionInput = document.querySelector('#description');

            const quotePreview = document.querySelector('#quote-preview');
            const authorPreview = document.querySelector('#author-preview');
            const descriptionPreview = document.querySelector('#description-preview');

            if (quoteInput && quotePreview) {
                quoteInput.addEventListener('input', function() {
                    quotePreview.textContent = this.value || '@Model.Quote';
                });
            }

            if (authorInput && authorPreview) {
                authorInput.addEventListener('input', function() {
                    authorPreview.textContent = '- ' + (this.value || '@Model.Auther');
                });
            }

            if (descriptionInput && descriptionPreview) {
                descriptionInput.addEventListener('input', function() {
                    descriptionPreview.textContent = this.value || '@Model.description';
                    descriptionPreview.style.display = this.value ? 'block' : 'none';
                });
            }

            // Form validation
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    if (this.checkValidity()) {
                        this.classList.add('is-valid');
                        this.classList.remove('is-invalid');
                    } else {
                        this.classList.add('is-invalid');
                        this.classList.remove('is-valid');
                    }
                });
            });

            // Unsaved changes warning
            let formChanged = false;
            inputs.forEach(input => {
                input.addEventListener('input', function() {
                    formChanged = true;
                });
            });

            window.addEventListener('beforeunload', function(e) {
                if (formChanged) {
                    e.preventDefault();
                    e.returnValue = '';
                }
            });

            form.addEventListener('submit', function() {
                formChanged = false;
            });
        });
    </script>
}
